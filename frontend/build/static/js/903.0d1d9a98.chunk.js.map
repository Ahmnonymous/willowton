{"version":3,"file":"static/js/903.0d1d9a98.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Grid/GridContext.js","../node_modules/@mui/material/Grid/gridClasses.js","../node_modules/@mui/material/Grid/Grid.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\n\r\n/**\r\n * @ignore - internal component.\r\n */\r\nconst GridContext = /*#__PURE__*/React.createContext();\r\nif (process.env.NODE_ENV !== 'production') {\r\n  GridContext.displayName = 'GridContext';\r\n}\r\nexport default GridContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\r\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\r\nexport function getGridUtilityClass(slot) {\r\n  return generateUtilityClass('MuiGrid', slot);\r\n}\r\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\r\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\r\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',\r\n// spacings\r\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`),\r\n// direction values\r\n...DIRECTIONS.map(direction => `direction-xs-${direction}`),\r\n// wrap values\r\n...WRAPS.map(wrap => `wrap-xs-${wrap}`),\r\n// grid sizes for all breakpoints\r\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\r\nexport default gridClasses;","'use client';\r\n\r\n// A grid component using the following libs as inspiration.\r\n//\r\n// For the implementation:\r\n// - https://getbootstrap.com/docs/4.3/layout/grid/\r\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\r\n// - https://github.com/roylee0704/react-flexbox-grid\r\n// - https://material.angularjs.org/latest/layout/introduction\r\n//\r\n// Follow this flexbox Guide to better understand the underlying model:\r\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\r\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\r\nimport composeClasses from '@mui/utils/composeClasses';\r\nimport requirePropFactory from \"../utils/requirePropFactory.js\";\r\nimport styled from \"../styles/styled.js\";\r\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\r\nimport useTheme from \"../styles/useTheme.js\";\r\nimport GridContext from \"./GridContext.js\";\r\nimport gridClasses, { getGridUtilityClass } from \"./gridClasses.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport function generateGrid({\r\n  theme,\r\n  ownerState\r\n}) {\r\n  let size;\r\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\r\n    // Use side effect over immutability for better performance.\r\n    let styles = {};\r\n    if (ownerState[breakpoint]) {\r\n      size = ownerState[breakpoint];\r\n    }\r\n    if (!size) {\r\n      return globalStyles;\r\n    }\r\n    if (size === true) {\r\n      // For the auto layouting\r\n      styles = {\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n        maxWidth: '100%'\r\n      };\r\n    } else if (size === 'auto') {\r\n      styles = {\r\n        flexBasis: 'auto',\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n        maxWidth: 'none',\r\n        width: 'auto'\r\n      };\r\n    } else {\r\n      const columnsBreakpointValues = resolveBreakpointValues({\r\n        values: ownerState.columns,\r\n        breakpoints: theme.breakpoints.values\r\n      });\r\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\r\n      if (columnValue === undefined || columnValue === null) {\r\n        return globalStyles;\r\n      }\r\n      // Keep 7 significant numbers.\r\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\r\n      let more = {};\r\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\r\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\r\n        if (themeSpacing !== '0px') {\r\n          const fullWidth = `calc(${width} + ${themeSpacing})`;\r\n          more = {\r\n            flexBasis: fullWidth,\r\n            maxWidth: fullWidth\r\n          };\r\n        }\r\n      }\r\n\r\n      // Close to the bootstrap implementation:\r\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\r\n      styles = {\r\n        flexBasis: width,\r\n        flexGrow: 0,\r\n        maxWidth: width,\r\n        ...more\r\n      };\r\n    }\r\n\r\n    // No need for a media query for the first size.\r\n    if (theme.breakpoints.values[breakpoint] === 0) {\r\n      Object.assign(globalStyles, styles);\r\n    } else {\r\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\r\n    }\r\n    return globalStyles;\r\n  }, {});\r\n}\r\nexport function generateDirection({\r\n  theme,\r\n  ownerState\r\n}) {\r\n  const directionValues = resolveBreakpointValues({\r\n    values: ownerState.direction,\r\n    breakpoints: theme.breakpoints.values\r\n  });\r\n  return handleBreakpoints({\r\n    theme\r\n  }, directionValues, propValue => {\r\n    const output = {\r\n      flexDirection: propValue\r\n    };\r\n    if (propValue.startsWith('column')) {\r\n      output[`& > .${gridClasses.item}`] = {\r\n        maxWidth: 'none'\r\n      };\r\n    }\r\n    return output;\r\n  });\r\n}\r\n\r\n/**\r\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\r\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\r\n * @returns [xs, sm]\r\n */\r\nfunction extractZeroValueBreakpointKeys({\r\n  breakpoints,\r\n  values\r\n}) {\r\n  let nonZeroKey = '';\r\n  Object.keys(values).forEach(key => {\r\n    if (nonZeroKey !== '') {\r\n      return;\r\n    }\r\n    if (values[key] !== 0) {\r\n      nonZeroKey = key;\r\n    }\r\n  });\r\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\r\n    return breakpoints[a] - breakpoints[b];\r\n  });\r\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\r\n}\r\nexport function generateRowGap({\r\n  theme,\r\n  ownerState\r\n}) {\r\n  const {\r\n    container,\r\n    rowSpacing\r\n  } = ownerState;\r\n  let styles = {};\r\n  if (container && rowSpacing !== 0) {\r\n    const rowSpacingValues = resolveBreakpointValues({\r\n      values: rowSpacing,\r\n      breakpoints: theme.breakpoints.values\r\n    });\r\n    let zeroValueBreakpointKeys;\r\n    if (typeof rowSpacingValues === 'object') {\r\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\r\n        breakpoints: theme.breakpoints.values,\r\n        values: rowSpacingValues\r\n      });\r\n    }\r\n    styles = handleBreakpoints({\r\n      theme\r\n    }, rowSpacingValues, (propValue, breakpoint) => {\r\n      const themeSpacing = theme.spacing(propValue);\r\n      if (themeSpacing !== '0px') {\r\n        return {\r\n          marginTop: `calc(-1 * ${themeSpacing})`,\r\n          [`& > .${gridClasses.item}`]: {\r\n            paddingTop: themeSpacing\r\n          }\r\n        };\r\n      }\r\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\r\n        return {};\r\n      }\r\n      return {\r\n        marginTop: 0,\r\n        [`& > .${gridClasses.item}`]: {\r\n          paddingTop: 0\r\n        }\r\n      };\r\n    });\r\n  }\r\n  return styles;\r\n}\r\nexport function generateColumnGap({\r\n  theme,\r\n  ownerState\r\n}) {\r\n  const {\r\n    container,\r\n    columnSpacing\r\n  } = ownerState;\r\n  let styles = {};\r\n  if (container && columnSpacing !== 0) {\r\n    const columnSpacingValues = resolveBreakpointValues({\r\n      values: columnSpacing,\r\n      breakpoints: theme.breakpoints.values\r\n    });\r\n    let zeroValueBreakpointKeys;\r\n    if (typeof columnSpacingValues === 'object') {\r\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\r\n        breakpoints: theme.breakpoints.values,\r\n        values: columnSpacingValues\r\n      });\r\n    }\r\n    styles = handleBreakpoints({\r\n      theme\r\n    }, columnSpacingValues, (propValue, breakpoint) => {\r\n      const themeSpacing = theme.spacing(propValue);\r\n      if (themeSpacing !== '0px') {\r\n        const negativeValue = `calc(-1 * ${themeSpacing})`;\r\n        return {\r\n          width: `calc(100% + ${themeSpacing})`,\r\n          marginLeft: negativeValue,\r\n          [`& > .${gridClasses.item}`]: {\r\n            paddingLeft: themeSpacing\r\n          }\r\n        };\r\n      }\r\n      if (zeroValueBreakpointKeys?.includes(breakpoint)) {\r\n        return {};\r\n      }\r\n      return {\r\n        width: '100%',\r\n        marginLeft: 0,\r\n        [`& > .${gridClasses.item}`]: {\r\n          paddingLeft: 0\r\n        }\r\n      };\r\n    });\r\n  }\r\n  return styles;\r\n}\r\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\r\n  // undefined/null or `spacing` <= 0\r\n  if (!spacing || spacing <= 0) {\r\n    return [];\r\n  }\r\n  // in case of string/number `spacing`\r\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\r\n    return [styles[`spacing-xs-${String(spacing)}`]];\r\n  }\r\n  // in case of object `spacing`\r\n  const spacingStyles = [];\r\n  breakpoints.forEach(breakpoint => {\r\n    const value = spacing[breakpoint];\r\n    if (Number(value) > 0) {\r\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\r\n    }\r\n  });\r\n  return spacingStyles;\r\n}\r\n\r\n// Default CSS values\r\n// flex: '0 1 auto',\r\n// flexDirection: 'row',\r\n// alignItems: 'flex-start',\r\n// flexWrap: 'nowrap',\r\n// justifyContent: 'flex-start',\r\nconst GridRoot = styled('div', {\r\n  name: 'MuiGrid',\r\n  slot: 'Root',\r\n  overridesResolver: (props, styles) => {\r\n    const {\r\n      ownerState\r\n    } = props;\r\n    const {\r\n      container,\r\n      direction,\r\n      item,\r\n      spacing,\r\n      wrap,\r\n      zeroMinWidth,\r\n      breakpoints\r\n    } = ownerState;\r\n    let spacingStyles = [];\r\n\r\n    // in case of grid item\r\n    if (container) {\r\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\r\n    }\r\n    const breakpointsStyles = [];\r\n    breakpoints.forEach(breakpoint => {\r\n      const value = ownerState[breakpoint];\r\n      if (value) {\r\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\r\n      }\r\n    });\r\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\r\n  }\r\n})(\r\n// FIXME(romgrk): Can't use memoTheme here\r\n({\r\n  ownerState\r\n}) => ({\r\n  boxSizing: 'border-box',\r\n  ...(ownerState.container && {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    width: '100%'\r\n  }),\r\n  ...(ownerState.item && {\r\n    margin: 0 // For instance, it's useful when used with a `figure` element.\r\n  }),\r\n  ...(ownerState.zeroMinWidth && {\r\n    minWidth: 0\r\n  }),\r\n  ...(ownerState.wrap !== 'wrap' && {\r\n    flexWrap: ownerState.wrap\r\n  })\r\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\r\nexport function resolveSpacingClasses(spacing, breakpoints) {\r\n  // undefined/null or `spacing` <= 0\r\n  if (!spacing || spacing <= 0) {\r\n    return [];\r\n  }\r\n  // in case of string/number `spacing`\r\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\r\n    return [`spacing-xs-${String(spacing)}`];\r\n  }\r\n  // in case of object `spacing`\r\n  const classes = [];\r\n  breakpoints.forEach(breakpoint => {\r\n    const value = spacing[breakpoint];\r\n    if (Number(value) > 0) {\r\n      const className = `spacing-${breakpoint}-${String(value)}`;\r\n      classes.push(className);\r\n    }\r\n  });\r\n  return classes;\r\n}\r\nconst useUtilityClasses = ownerState => {\r\n  const {\r\n    classes,\r\n    container,\r\n    direction,\r\n    item,\r\n    spacing,\r\n    wrap,\r\n    zeroMinWidth,\r\n    breakpoints\r\n  } = ownerState;\r\n  let spacingClasses = [];\r\n\r\n  // in case of grid item\r\n  if (container) {\r\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\r\n  }\r\n  const breakpointsClasses = [];\r\n  breakpoints.forEach(breakpoint => {\r\n    const value = ownerState[breakpoint];\r\n    if (value) {\r\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\r\n    }\r\n  });\r\n  const slots = {\r\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\r\n  };\r\n  return composeClasses(slots, getGridUtilityClass, classes);\r\n};\r\n\r\n/**\r\n * @deprecated Use the [`Grid2`](https://mui.com/material-ui/react-grid2/) component instead.\r\n */\r\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\r\n  const themeProps = useDefaultProps({\r\n    props: inProps,\r\n    name: 'MuiGrid'\r\n  });\r\n  const {\r\n    breakpoints\r\n  } = useTheme();\r\n  const props = extendSxProp(themeProps);\r\n  const {\r\n    className,\r\n    columns: columnsProp,\r\n    columnSpacing: columnSpacingProp,\r\n    component = 'div',\r\n    container = false,\r\n    direction = 'row',\r\n    item = false,\r\n    rowSpacing: rowSpacingProp,\r\n    spacing = 0,\r\n    wrap = 'wrap',\r\n    zeroMinWidth = false,\r\n    ...other\r\n  } = props;\r\n  const rowSpacing = rowSpacingProp || spacing;\r\n  const columnSpacing = columnSpacingProp || spacing;\r\n  const columnsContext = React.useContext(GridContext);\r\n\r\n  // columns set with default breakpoint unit of 12\r\n  const columns = container ? columnsProp || 12 : columnsContext;\r\n  const breakpointsValues = {};\r\n  const otherFiltered = {\r\n    ...other\r\n  };\r\n  breakpoints.keys.forEach(breakpoint => {\r\n    if (other[breakpoint] != null) {\r\n      breakpointsValues[breakpoint] = other[breakpoint];\r\n      delete otherFiltered[breakpoint];\r\n    }\r\n  });\r\n  const ownerState = {\r\n    ...props,\r\n    columns,\r\n    container,\r\n    direction,\r\n    item,\r\n    rowSpacing,\r\n    columnSpacing,\r\n    wrap,\r\n    zeroMinWidth,\r\n    spacing,\r\n    ...breakpointsValues,\r\n    breakpoints: breakpoints.keys\r\n  };\r\n  const classes = useUtilityClasses(ownerState);\r\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\r\n    value: columns,\r\n    children: /*#__PURE__*/_jsx(GridRoot, {\r\n      ownerState: ownerState,\r\n      className: clsx(classes.root, className),\r\n      as: component,\r\n      ref: ref,\r\n      ...otherFiltered\r\n    })\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\r\n  classes: PropTypes.object,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * The number of columns.\r\n   * @default 12\r\n   */\r\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\r\n  /**\r\n   * Defines the horizontal space between the type `item` components.\r\n   * It overrides the value of the `spacing` prop.\r\n   */\r\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes.elementType,\r\n  /**\r\n   * If `true`, the component will have the flex *container* behavior.\r\n   * You should be wrapping *items* with a *container*.\r\n   * @default false\r\n   */\r\n  container: PropTypes.bool,\r\n  /**\r\n   * Defines the `flex-direction` style property.\r\n   * It is applied for all screen sizes.\r\n   * @default 'row'\r\n   */\r\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\r\n  /**\r\n   * If `true`, the component will have the flex *item* behavior.\r\n   * You should be wrapping *items* with a *container*.\r\n   * @default false\r\n   */\r\n  item: PropTypes.bool,\r\n  /**\r\n   * If a number, it sets the number of columns the grid item uses.\r\n   * It can't be greater than the total number of columns of the container (12 by default).\r\n   * If 'auto', the grid item's width matches its content.\r\n   * If false, the prop is ignored.\r\n   * If true, the grid item's width grows to use the space available in the grid container.\r\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\r\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\r\n  /**\r\n   * If a number, it sets the number of columns the grid item uses.\r\n   * It can't be greater than the total number of columns of the container (12 by default).\r\n   * If 'auto', the grid item's width matches its content.\r\n   * If false, the prop is ignored.\r\n   * If true, the grid item's width grows to use the space available in the grid container.\r\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\r\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\r\n  /**\r\n   * Defines the vertical space between the type `item` components.\r\n   * It overrides the value of the `spacing` prop.\r\n   */\r\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\r\n  /**\r\n   * If a number, it sets the number of columns the grid item uses.\r\n   * It can't be greater than the total number of columns of the container (12 by default).\r\n   * If 'auto', the grid item's width matches its content.\r\n   * If false, the prop is ignored.\r\n   * If true, the grid item's width grows to use the space available in the grid container.\r\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\r\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\r\n  /**\r\n   * Defines the space between the type `item` components.\r\n   * It can only be used on a type `container` component.\r\n   * @default 0\r\n   */\r\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\r\n  /**\r\n   * Defines the `flex-wrap` style property.\r\n   * It's applied for all screen sizes.\r\n   * @default 'wrap'\r\n   */\r\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\r\n  /**\r\n   * If a number, it sets the number of columns the grid item uses.\r\n   * It can't be greater than the total number of columns of the container (12 by default).\r\n   * If 'auto', the grid item's width matches its content.\r\n   * If false, the prop is ignored.\r\n   * If true, the grid item's width grows to use the space available in the grid container.\r\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\r\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\r\n  /**\r\n   * If a number, it sets the number of columns the grid item uses.\r\n   * It can't be greater than the total number of columns of the container (12 by default).\r\n   * If 'auto', the grid item's width matches its content.\r\n   * If false, the prop is ignored.\r\n   * If true, the grid item's width grows to use the space available in the grid container.\r\n   * The value is applied for all the screen sizes with the lowest priority.\r\n   * @default false\r\n   */\r\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\r\n  /**\r\n   * If `true`, it sets `min-width: 0` on the item.\r\n   * Refer to the limitations section of the documentation to better understand the use case.\r\n   * @default false\r\n   */\r\n  zeroMinWidth: PropTypes.bool\r\n} : void 0;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const requireProp = requirePropFactory('Grid', Grid);\r\n  // eslint-disable-next-line no-useless-concat\r\n  Grid['propTypes' + ''] = {\r\n    // eslint-disable-next-line react/forbid-foreign-prop-types\r\n    ...Grid.propTypes,\r\n    direction: requireProp('container'),\r\n    lg: requireProp('item'),\r\n    md: requireProp('item'),\r\n    sm: requireProp('item'),\r\n    spacing: requireProp('container'),\r\n    wrap: requireProp('container'),\r\n    xs: requireProp('item'),\r\n    zeroMinWidth: requireProp('item')\r\n  };\r\n}\r\nexport default Grid;"],"names":["React","getGridUtilityClass","slot","generateUtilityClass","GRID_SIZES","generateUtilityClasses","map","spacing","concat","direction","wrap","size","_excluded","extractZeroValueBreakpointKeys","_ref3","breakpoints","values","nonZeroKey","Object","keys","forEach","key","sortedBreakpointKeysByValue","sort","a","b","slice","indexOf","GridRoot","styled","name","overridesResolver","props","styles","ownerState","container","item","zeroMinWidth","spacingStyles","arguments","length","undefined","Number","isNaN","String","breakpoint","value","push","resolveSpacingStyles","breakpointsStyles","root","_ref6","_objectSpread","boxSizing","display","flexWrap","width","margin","minWidth","_ref2","theme","directionValues","resolveBreakpointValues","handleBreakpoints","propValue","output","flexDirection","startsWith","gridClasses","maxWidth","_ref4","rowSpacing","rowSpacingValues","zeroValueBreakpointKeys","_zeroValueBreakpointK","themeSpacing","marginTop","paddingTop","includes","_ref5","columnSpacing","columnSpacingValues","_zeroValueBreakpointK2","negativeValue","marginLeft","paddingLeft","_ref","reduce","globalStyles","flexBasis","flexGrow","flexShrink","columnsBreakpointValues","columns","columnValue","Math","round","more","fullWidth","assign","up","useUtilityClasses","classes","spacingClasses","className","resolveSpacingClasses","breakpointsClasses","slots","composeClasses","Grid","inProps","ref","themeProps","useDefaultProps","useTheme","extendSxProp","columnsProp","columnSpacingProp","component","rowSpacingProp","other","_objectWithoutProperties","columnsContext","GridContext","breakpointsValues","otherFiltered","_jsx","Provider","children","clsx","as"],"sourceRoot":""}