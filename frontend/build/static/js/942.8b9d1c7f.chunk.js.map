{"version":3,"file":"static/js/942.8b9d1c7f.chunk.js","mappings":"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","sources":["pages/reports/StudentReport.js","components/Breadcrumb.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  InputBase,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Menu,\r\n  MenuItem,\r\n  Tooltip,\r\n  Divider,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Select,\r\n  MenuItem as MuiMenuItem,\r\n  Typography,\r\n  Button,\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport ViewColumnIcon from '@mui/icons-material/ViewColumn';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\r\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { ThemeContext } from '../../config/ThemeContext.js';\r\nimport Breadcrumb from \"../../components/Breadcrumb.js\";\r\nimport './GenericTable.css';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nfunction GenericTable() {\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n  const [allStudents, setAllStudents] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [columns, setColumns] = useState([]);\r\n  const [visibleColumns, setVisibleColumns] = useState([]);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: null });\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [columnSearchTerm, setColumnSearchTerm] = useState('');\r\n  const [totalRecords, setTotalRecords] = useState(0);\r\n  const searchRef = useRef(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const fetchStudents = useCallback(async () => {\r\n    try {\r\n      const res = await axios.get(`${API_BASE_URL}/student-details`);\r\n      const records = Array.isArray(res.data) ? res.data : res?.data?.records ?? [];\r\n\r\n      if (records.length > 0) {\r\n        const cols = Object.keys(records[0]).filter((c) => c !== 'id');\r\n        setColumns(cols);\r\n        setVisibleColumns(cols);\r\n      }\r\n\r\n      setAllStudents(records);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch students:\", error);\r\n      setAllStudents([]);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchStudents();\r\n  }, [fetchStudents]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (searchRef.current && !searchRef.current.contains(event.target)) {\r\n        setShowSearch(false);\r\n      }\r\n    };\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  // const sentenceCase = (str) => str.replace(/_/g, ' ').replace(/\\w/g, (c) => c.toUpperCase());\r\n  const sentenceCase = (str) => str.replace(/_/g, ' ').replace(/\\b\\w/g, (c) => c.toUpperCase());\r\n  const formatDate = (date) => (date ? new Date(date).toLocaleDateString() : 'N/A');\r\n\r\n  const toggleColumn = (col) => {\r\n    if (visibleColumns.includes(col)) {\r\n      setVisibleColumns((prev) => prev.filter((c) => c !== col));\r\n    } else {\r\n      const idx = columns.indexOf(col);\r\n      const updated = [...visibleColumns];\r\n      updated.splice(idx, 0, col);\r\n      setVisibleColumns(updated);\r\n    }\r\n  };\r\n\r\n  const resetColumns = () => setVisibleColumns(columns);\r\n\r\n  const exportToExcel = () => {\r\n    const data = allStudents.map((s) =>\r\n      Object.fromEntries(visibleColumns.map((col) => [sentenceCase(col), s[col]]))\r\n    );\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Report');\r\n    XLSX.writeFile(wb, 'student_report.xlsx');\r\n  };\r\n\r\n  const handleSort = (col) => {\r\n    setSortConfig((prev) => {\r\n      if (prev.key === col) {\r\n        return {\r\n          key: col,\r\n          direction:\r\n            prev.direction === 'asc' ? 'desc' : prev.direction === 'desc' ? null : 'asc',\r\n        };\r\n      } else {\r\n        return { key: col, direction: 'asc' };\r\n      }\r\n    });\r\n    setPage(0);\r\n  };\r\n\r\n  const filteredStudents = allStudents\r\n    .filter((student) =>\r\n      visibleColumns.some((col) => {\r\n        const val = student[col];\r\n        return val != null && val.toString().toLowerCase().includes(searchTerm.toLowerCase());\r\n      })\r\n    )\r\n    .sort((a, b) => {\r\n      if (!sortConfig.key || !sortConfig.direction) return 0;\r\n      const aVal = a[sortConfig.key];\r\n      const bVal = b[sortConfig.key];\r\n      if (aVal == null || bVal == null) return 0;\r\n      return sortConfig.direction === 'asc'\r\n        ? aVal.toString().localeCompare(bVal.toString())\r\n        : bVal.toString().localeCompare(aVal.toString());\r\n    });\r\n\r\n  const paginatedStudents = filteredStudents.slice(page * rowsPerPage, (page + 1) * rowsPerPage);\r\n  useEffect(() => {\r\n    setTotalRecords(filteredStudents.length);\r\n  }, [filteredStudents]);\r\n\r\n  const filteredColumns = columns.filter((col) =>\r\n    col.toLowerCase().includes(columnSearchTerm.toLowerCase()) ||\r\n    sentenceCase(col).toLowerCase().includes(columnSearchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ backgroundColor: isDarkMode ? '#2D3748' : '#F7FAFC', minHeight: '100vh', p: 2 }}>\r\n      <Breadcrumb title=\"Student Report\" />\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\r\n        {!showSearch && (\r\n          <Tooltip title=\"Search\">\r\n            <IconButton size=\"small\" onClick={() => setShowSearch(true)} sx={{ color: isDarkMode ? 'white' : 'black' }}>\r\n              <SearchIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n        <Box\r\n          ref={searchRef}\r\n          sx={{\r\n            width: showSearch ? 220 : 0,\r\n            height: 36,\r\n            transition: 'width 0.3s ease',\r\n            overflow: 'hidden',\r\n          }}\r\n        >\r\n          {showSearch && (\r\n            <InputBase\r\n              placeholder=\"Search\"\r\n              value={searchTerm}\r\n              onChange={(e) => {\r\n                setSearchTerm(e.target.value);\r\n                setPage(0);\r\n              }}\r\n              sx={{\r\n                backgroundColor: isDarkMode ? '#1e293b' : '#fff',\r\n                color: isDarkMode ? 'white' : 'black',\r\n                px: 1.5,\r\n                height: '100%',\r\n                fontSize: '0.85rem',\r\n                borderRadius: 1,\r\n                border: `1px solid ${isDarkMode ? '#4A5568' : '#CBD5E0'}`,\r\n                width: '100%',\r\n              }}\r\n              startAdornment={<SearchIcon sx={{ mr: 1 }} fontSize=\"small\" />}\r\n            />\r\n          )}\r\n        </Box>\r\n\r\n        <Tooltip title=\"Column Visibility\">\r\n          <IconButton size=\"small\" onClick={(e) => setAnchorEl(e.currentTarget)} sx={{ color: isDarkMode ? 'white' : 'black' }}>\r\n            <ViewColumnIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        <Tooltip title=\"Export to Excel\">\r\n          <IconButton size=\"small\" onClick={exportToExcel} sx={{ color: isDarkMode ? 'white' : 'black' }}>\r\n            <DownloadIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n\r\n      {/* Column Toggle Menu */}\r\n      <Menu anchorEl={anchorEl} open={open} onClose={() => setAnchorEl(null)} PaperProps={{ sx: { minWidth: 200, maxHeight: 300, p: 1 } }}>\r\n        <InputBase\r\n          placeholder=\"Search Columns\"\r\n          value={columnSearchTerm}\r\n          onChange={(e) => setColumnSearchTerm(e.target.value)}\r\n          sx={{\r\n            mb: 1,\r\n            px: 1,\r\n            fontSize: '0.7rem',\r\n            backgroundColor: '#f1f5f9',\r\n            borderRadius: 1,\r\n            width: '100%', // Stretch to full width\r\n            height: '28px', // Match column name height\r\n          }}\r\n        />\r\n        {filteredColumns.map((col) => (\r\n          <MenuItem key={col} dense>\r\n            <FormControlLabel\r\n              control={<Checkbox size=\"small\" checked={visibleColumns.includes(col)} onChange={() => toggleColumn(col)} />}\r\n              label={<span style={{ fontSize: '0.7rem' }}>{sentenceCase(col)}</span>} // Smaller font size\r\n            />\r\n          </MenuItem>\r\n        ))}\r\n        <Divider sx={{ my: 1 }} />\r\n        <MenuItem dense onClick={() => { resetColumns(); setAnchorEl(null); }}>\r\n          <ListItemIcon><RefreshIcon fontSize=\"small\" /></ListItemIcon>\r\n          <ListItemText primary=\"Reset Columns\" primaryTypographyProps={{ fontSize: '0.7rem' }} />\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      <div className=\"generic-table-container\">\r\n        <table className=\"generic-table\" style={{ backgroundColor: isDarkMode ? '#1e293b' : '#fff' }}>\r\n          <thead>\r\n            <tr>\r\n              {visibleColumns.map((col) => (\r\n                <th\r\n                  key={col}\r\n                  style={{\r\n                    color: isDarkMode ? 'white' : '#1e293b',\r\n                    cursor: 'pointer',\r\n                    position: 'relative',\r\n                  }}\r\n                  onClick={() => handleSort(col)}\r\n                >\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    {sentenceCase(col)}\r\n                    <Box sx={{ ml: 0.5, display: 'flex', alignItems: 'center' }}>\r\n                      {sortConfig.key === col && sortConfig.direction === 'asc' && <ArrowDropUpIcon fontSize=\"small\" />}\r\n                      {sortConfig.key === col && sortConfig.direction === 'desc' && <ArrowDropDownIcon fontSize=\"small\" />}\r\n                      {sortConfig.key === col && sortConfig.direction === null && <ClearIcon fontSize=\"small\" />}\r\n                    </Box>\r\n                  </Box>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {paginatedStudents.length > 0 ? (\r\n              paginatedStudents.map((student) => (\r\n                <tr key={student.id}>\r\n                  {visibleColumns.map((col) => (\r\n                    <td key={col} style={{ color: isDarkMode ? 'white' : '#1e293b' }}>\r\n                      {col.includes('date') ? formatDate(student[col]) : student[col]}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr><td colSpan={visibleColumns.length} className=\"no-matching-records\">No matching records found</td></tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2 }}>\r\n        <Typography variant=\"caption\">\r\n          {page * rowsPerPage + 1}-{Math.min((page + 1) * rowsPerPage, totalRecords)} of {totalRecords}\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Button onClick={() => setPage((p) => Math.max(0, p - 1))} disabled={page === 0} size=\"small\" variant=\"outlined\" startIcon={<ArrowBackIosIcon fontSize=\"small\" />}>Prev</Button>\r\n          <Select\r\n            value={rowsPerPage}\r\n            onChange={(e) => { setRowsPerPage(parseInt(e.target.value)); setPage(0); }}\r\n            size=\"small\"\r\n            sx={{ fontSize: '0.85rem' }}\r\n          >\r\n            {[5, 10, 20, 50].map((n) => (\r\n              <MuiMenuItem key={n} value={n}>{n}</MuiMenuItem>\r\n            ))}\r\n          </Select>\r\n          <Button onClick={() => setPage((p) => (p + 1) * rowsPerPage < totalRecords ? p + 1 : p)} disabled={(page + 1) * rowsPerPage >= totalRecords} size=\"small\" variant=\"outlined\" endIcon={<ArrowForwardIosIcon fontSize=\"small\" />}>Next</Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default GenericTable;","import React, { useContext } from \"react\";\r\nimport { Typography, Box } from \"@mui/material\";\r\nimport { ThemeContext } from '../config/ThemeContext'; // Import ThemeContext\r\n\r\nconst Breadcrumb = ({ title }) => {\r\n  // Move the useContext inside the component\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Box sx={{ padding: \"12px\", backgroundColor: isDarkMode ? '#1e293b' : '#e1f5fe', borderRadius: \"8px\", marginBottom: \"12px\", border: '1px solid #ccc' }}>\r\n      <Typography variant=\"h6\" sx={{ color: isDarkMode ? 'white' : 'black', fontWeight: \"bold\" }}>\r\n        {title}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n"],"names":["isDarkMode","useContext","ThemeContext","allStudents","setAllStudents","useState","searchTerm","setSearchTerm","columns","setColumns","visibleColumns","setVisibleColumns","anchorEl","setAnchorEl","showSearch","setShowSearch","sortConfig","setSortConfig","key","direction","page","setPage","rowsPerPage","setRowsPerPage","columnSearchTerm","setColumnSearchTerm","totalRecords","setTotalRecords","searchRef","useRef","open","Boolean","fetchStudents","useCallback","async","_res$data$records","_res$data","res","axios","get","records","Array","isArray","data","length","cols","Object","keys","filter","c","error","console","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","sentenceCase","str","replace","toUpperCase","filteredStudents","student","some","col","val","toString","toLowerCase","includes","sort","a","b","aVal","bVal","localeCompare","paginatedStudents","slice","filteredColumns","_jsxs","Box","sx","backgroundColor","minHeight","p","children","_jsx","Breadcrumb","title","display","alignItems","gap","mb","Tooltip","IconButton","size","onClick","color","SearchIcon","fontSize","ref","width","height","transition","overflow","InputBase","placeholder","value","onChange","e","px","borderRadius","border","startAdornment","mr","currentTarget","ViewColumnIcon","exportToExcel","map","s","fromEntries","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","DownloadIcon","Menu","onClose","PaperProps","minWidth","maxHeight","MenuItem","dense","FormControlLabel","control","Checkbox","checked","prev","idx","indexOf","updated","splice","toggleColumn","label","style","Divider","my","ListItemIcon","RefreshIcon","ListItemText","primary","primaryTypographyProps","className","cursor","position","handleSort","ml","ArrowDropUpIcon","ArrowDropDownIcon","ClearIcon","date","Date","toLocaleDateString","id","colSpan","justifyContent","mt","Typography","variant","Math","min","Button","max","disabled","startIcon","ArrowBackIosIcon","Select","parseInt","n","MuiMenuItem","endIcon","ArrowForwardIosIcon","_ref","padding","marginBottom","fontWeight"],"sourceRoot":""}