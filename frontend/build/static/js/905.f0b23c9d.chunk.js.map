{"version":3,"file":"static/js/905.f0b23c9d.chunk.js","mappings":"iLAIA,MAaA,EAbmBA,IAAgB,IAAf,MAAEC,GAAOD,EAE3B,MAAM,WAAEE,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAElC,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,gBAAiBP,EAAa,UAAY,UAAWQ,aAAc,MAAOC,aAAc,OAAQC,OAAQ,kBAAmBC,UACrJR,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKR,GAAI,CAAES,MAAOd,EAAa,QAAU,QAASe,WAAY,QAASJ,SACxFZ,KAEC,C,6IC+FV,QApGA,WACE,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAC3Bc,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,IAGjCK,EAAcC,IAClB,MAAMC,EAAI,IAAIC,KAAKF,GAInB,MAAO,GAHOC,EAAEE,WAAa,KACjBF,EAAEG,aACDH,EAAEI,eACiB,GAIlCC,EAAAA,EAAAA,YAAU,KACcC,WACpB,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,qEAE7BF,EAASG,KAAKC,OAAS,GAEzBd,EAAWe,OAAOC,KAAKN,EAASG,KAAK,IAAII,QAAQC,GAAsB,OAAXA,KAG9DvB,EAAYe,EAASG,KAAK,EAG5BM,EAAe,GACd,IAGH,MAAMC,EAAmB1B,EAASuB,QAAQI,GACjCtB,EAAQuB,MAAMJ,IACnB,MAAMK,EAAQF,EAAQH,GACtB,SAAIK,GAA0B,kBAAVA,IACXA,EAAMC,cAAcC,SAAS5B,EAAW2B,cAErC,MAIhB,OACE3C,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEE,gBAAiBP,EAAa,UAAY,UAAWgD,UAAW,QAAS1C,QAAS,OAAQK,UACnGsC,EAAAA,EAAAA,MAAA,OAAAtC,SAAA,EACER,EAAAA,EAAAA,KAAC+C,EAAAA,EAAU,CAACnD,MAAM,uBAGlBI,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,2BAA0BxC,UACvCR,EAAAA,EAAAA,KAAA,SACEiD,KAAK,OACLD,UAAU,uBACVE,YAAY,YACZR,MAAO1B,EACPmC,SAAWC,GAAMnC,EAAcmC,EAAEC,OAAOX,YAI5C1C,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,0BAAyBxC,UACtCsC,EAAAA,EAAAA,MAAA,SAAOE,UAAU,gBAAgBM,MAAO,CAAElD,gBAAiBP,EAAa,UAAY,SAAUW,SAAA,EAC5FR,EAAAA,EAAAA,KAAA,SAAAQ,UACER,EAAAA,EAAAA,KAAA,MAAAQ,SACGU,EAAQqC,KAAKlB,IACZS,EAAAA,EAAAA,MAAA,MAAAtC,SAAA,CACG6B,EACEmB,QAAQ,KAAM,KACdA,QAAQ,SAAUC,GAASA,EAAKC,gBAAe,MAH3CrB,UAQfrC,EAAAA,EAAAA,KAAA,SAAAQ,SACG+B,EAAiBN,OAAS,EACzBM,EAAiBgB,KAAKf,IACpBxC,EAAAA,EAAAA,KAAA,MAAAQ,SACGU,EAAQqC,KAAKlB,IACZrC,EAAAA,EAAAA,KAAA,MAAAQ,SAEc,iCAAX6B,GAAwD,gBAAXA,EAC1CjB,EAAWoB,EAAQH,IACnBG,EAAQH,IAJLA,MAFJG,EAAQmB,OAYnB3D,EAAAA,EAAAA,KAAA,MAAAQ,UACER,EAAAA,EAAAA,KAAA,MAAI4D,QAAS1C,EAAQe,OAAQe,UAAU,sBAAqBxC,SAAC,2CAW/E,C","sources":["components/Breadcrumb.js","pages/reports/VoluntaryReport.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Typography, Box } from \"@mui/material\";\r\nimport { ThemeContext } from '../config/ThemeContext'; // Import ThemeContext\r\n\r\nconst Breadcrumb = ({ title }) => {\r\n  // Move the useContext inside the component\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Box sx={{ padding: \"12px\", backgroundColor: isDarkMode ? '#1e293b' : '#e1f5fe', borderRadius: \"8px\", marginBottom: \"12px\", border: '1px solid #ccc' }}>\r\n      <Typography variant=\"h6\" sx={{ color: isDarkMode ? 'white' : 'black', fontWeight: \"bold\" }}>\r\n        {title}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import Breadcrumb from \"../../components/Breadcrumb\";\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { Box } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { ThemeContext } from '../../config/ThemeContext'; // Import ThemeContext\r\nimport './GenericTable.css'; // Updated generic class names for styling\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\nfunction GenericTable() {\r\n  const { isDarkMode } = useContext(ThemeContext); // Access theme context\r\n  const [students, setStudents] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');  // Search term to filter the student list\r\n  const [columns, setColumns] = useState([]); // To store the column names\r\n\r\n  // Format the date to mm/dd/yyyy\r\n  const formatDate = (date) => {\r\n    const d = new Date(date);\r\n    const month = d.getMonth() + 1; // Months are zero-indexed, so add 1\r\n    const day = d.getDate();\r\n    const year = d.getFullYear();\r\n    return `${month}/${day}/${year}`;\r\n  };\r\n\r\n  // Fetch student details when the component mounts\r\n  useEffect(() => {\r\n    const fetchStudents = async () => {\r\n      const response = await axios.get(`${API_BASE_URL}/view/student-voluntary-service`);\r\n\r\n      if (response.data.length > 0) {\r\n        // Dynamically set the columns from the first student's object, remove the 'id' column\r\n        setColumns(Object.keys(response.data[0]).filter((column) => column !== 'id')); // Remove 'id' column\r\n      }\r\n\r\n      setStudents(response.data);\r\n    };\r\n\r\n    fetchStudents();\r\n  }, []); // Only run once when component mounts\r\n\r\n  // Handle the search term and filter students based on it\r\n  const filteredStudents = students.filter((student) => {\r\n    return columns.some((column) => {\r\n      const value = student[column];\r\n      if (value && typeof value === 'string') {\r\n        return value.toLowerCase().includes(searchTerm.toLowerCase());\r\n      }\r\n      return false;\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Box sx={{ backgroundColor: isDarkMode ? '#2D3748' : '#F7FAFC', minHeight: '100vh', padding: '1px' }}>\r\n      <div>\r\n        <Breadcrumb title=\"Voluntary Service\" />\r\n\r\n        {/* Generic Search Input */}\r\n        <div className=\"generic-search-container\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"generic-search-input\"\r\n            placeholder=\"Search...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"generic-table-container\">\r\n          <table className=\"generic-table\" style={{ backgroundColor: isDarkMode ? '#1e293b' : 'white' }}>\r\n            <thead>\r\n              <tr>\r\n                {columns.map((column) => (\r\n                  <th key={column}>\r\n                    {column\r\n                      .replace(/_/g, ' ') // Replace underscores with spaces\r\n                      .replace(/\\b\\w/g, (char) => char.toUpperCase())} {/* Convert to Title Case */}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredStudents.length > 0 ? (\r\n                filteredStudents.map((student) => (\r\n                  <tr key={student.id}>\r\n                    {columns.map((column) => (\r\n                      <td key={column}>\r\n                        {/* Format dates for 'student_date_stamp' and 'student_dob' columns */}\r\n                        {column === 'voluntary_service_date_stamp' || column === 'student_dob'\r\n                          ? formatDate(student[column]) // Format the date fields\r\n                          : student[column]}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={columns.length} className=\"no-matching-records\">\r\n                    No matching records found\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default GenericTable;\r\n"],"names":["_ref","title","isDarkMode","useContext","ThemeContext","_jsx","Box","sx","padding","backgroundColor","borderRadius","marginBottom","border","children","Typography","variant","color","fontWeight","students","setStudents","useState","searchTerm","setSearchTerm","columns","setColumns","formatDate","date","d","Date","getMonth","getDate","getFullYear","useEffect","async","response","axios","get","data","length","Object","keys","filter","column","fetchStudents","filteredStudents","student","some","value","toLowerCase","includes","minHeight","_jsxs","Breadcrumb","className","type","placeholder","onChange","e","target","style","map","replace","char","toUpperCase","id","colSpan"],"sourceRoot":""}