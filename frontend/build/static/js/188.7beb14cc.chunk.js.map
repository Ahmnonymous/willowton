{"version":3,"file":"static/js/188.7beb14cc.chunk.js","mappings":"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","sources":["pages/CreateAdmin.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TableContainer,\r\n  Drawer,\r\n  TextField,\r\n  Grid,\r\n  Divider,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle\r\n} from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { useMediaQuery } from \"@mui/material\";\r\nimport * as yup from \"yup\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { ThemeContext } from '../config/ThemeContext';  // Import ThemeContext\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n// Validation Schema for Form\r\nconst validationSchema = yup.object({\r\n  first_name: yup.string().required(\"First name is required\"),\r\n  last_name: yup.string().required(\"Last name is required\"),\r\n  email_address: yup\r\n    .string()\r\n    .email(\"Invalid email address\")\r\n    .required(\"Email is required\"),\r\n  password: yup.string().min(6, \"Password should be at least 6 characters\").required(\"Password is required\"),\r\n  user_type: yup.string().required(\"Please select user type\"),\r\n});\r\n\r\nconst UserReport = () => {\r\n  const { isDarkMode } = useContext(ThemeContext);  // Access theme context\r\n  const [users, setUsers] = useState([]);\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const [editUser, setEditUser] = useState(null);\r\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\r\n\r\n  // Check for larger or smaller screen size\r\n  const isLargeScreen = useMediaQuery(\"(min-width:600px)\");\r\n\r\n  // Drawer width based on screen size\r\n  const drawerWidth = isLargeScreen ? 500 : 330;\r\n\r\n  // Get user type from localStorage\r\n  const userType = JSON.parse(localStorage.getItem(\"user\"))?.user_type;\r\n\r\n  // Fetch users data\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      let apiUrl = \"\";\r\n      if (userType === \"admin\") {\r\n        apiUrl = `${API_BASE_URL}/users`;\r\n      } else if (userType === \"student\") {\r\n        const userId = JSON.parse(localStorage.getItem(\"user\"))?.user_id;\r\n        apiUrl = `${API_BASE_URL}/users/${userId}`;\r\n      }\r\n      try {\r\n        const response = await fetch(apiUrl);\r\n        const data = await response.json();\r\n\r\n        // If userType is student, we are getting a single object, otherwise it's an array\r\n        if (userType === \"admin\") {\r\n          if (Array.isArray(data)) {\r\n            setUsers(data);\r\n          } else {\r\n            console.error(\"Fetched data is not an array\");\r\n          }\r\n        } else if (userType === \"student\") {\r\n          // For student, data is an object\r\n          setUsers([data]);  // Wrap the single object into an array\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    };\r\n    fetchUsers();\r\n  }, [userType]);\r\n\r\n  // Fetch user by ID for editing\r\n  const fetchUserById = async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/users/${id}`);\r\n    const data = await response.json();\r\n    setEditUser(data);\r\n  };\r\n\r\n  // Formik for handling user form\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      first_name: editUser ? editUser.first_name : \"\",\r\n      last_name: editUser ? editUser.last_name : \"\",\r\n      email_address: editUser ? editUser.email_address : \"\",\r\n      password: \"\",\r\n      user_type: \"admin\",  // Set \"Admin\" as the default value for user_type\r\n    },\r\n    validationSchema: validationSchema,\r\n    enableReinitialize: true, // Reinitialize when `editUser` changes\r\n    onSubmit: async (values) => {\r\n      const response = editUser\r\n        ? await fetch(`${API_BASE_URL}/users/${editUser.user_id}`, {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(values),\r\n        })\r\n        : await fetch(`${API_BASE_URL}/users`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUsers((prevUsers) =>\r\n          editUser\r\n            ? prevUsers.map((user) => (user.user_id === data.user_id ? data : user))\r\n            : [...prevUsers, data]\r\n        );\r\n        setDrawerOpen(false);\r\n      } else {\r\n        console.error(\"Failed to save data\");\r\n      }\r\n    },\r\n  });\r\n\r\n  const handleCreateClick = () => {\r\n    setEditUser(null); // Clear any selected user for new creation\r\n    setDrawerOpen(true); // Open the drawer for creating new user\r\n  };\r\n\r\n  const handleEditClick = (user) => {\r\n    fetchUserById(user.user_id); // Fetch user data by ID for editing\r\n    setDrawerOpen(true); // Open the drawer for editing user details\r\n  };\r\n\r\n  const handleDeleteClick = () => {\r\n    setDeleteConfirmationOpen(true); // Open confirmation dialog\r\n  };\r\n\r\n  const handleDeleteConfirm = async () => {\r\n    if (!editUser) return;\r\n    try {\r\n      await fetch(`${API_BASE_URL}/users/${editUser.user_id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      setUsers((prevUsers) => prevUsers.filter((user) => user.user_id !== editUser.user_id));\r\n      setDeleteConfirmationOpen(false);\r\n      setDrawerOpen(false);\r\n    } catch (err) {\r\n      console.error(\"Failed to delete user\", err);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCancel = () => {\r\n    setDeleteConfirmationOpen(false); // Close confirmation dialog\r\n  };\r\n\r\n  const handleCloseDrawer = () => {\r\n    setDrawerOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ backgroundColor: isDarkMode ? '#2D3748' : '#F7FAFC', minHeight: '100vh' }}>\r\n      {/* Header Section with Button */}\r\n      <Box sx={{ border: '1px solid #ccc', padding: \"12px\", backgroundColor: isDarkMode ? '#1E293B' : '#e1f5fe', borderRadius: \"8px\", marginBottom: \"12px\", display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        <Typography variant=\"h6\" sx={{ fontWeight: \"bold\", color: isDarkMode ? '#F7FAFC' : '#1E293B' }}>User Information</Typography>\r\n\r\n        {/* Show create button only for admins */}\r\n        {userType === \"admin\" && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleCreateClick}\r\n            fontSize=\"small\"\r\n            sx={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              backgroundColor: isDarkMode ? 'white' : 'black',\r\n              color: isDarkMode ? 'black' : 'white',\r\n              padding: \"2px 6px\",\r\n              textTransform: \"none\",\r\n            }}\r\n          >\r\n            <AddIcon sx={{ marginRight: 1, fontSize: 15 }} />\r\n            Create\r\n          </Button>\r\n        )}\r\n      </Box>\r\n\r\n      {/* User Table */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <TableContainer sx={{ width: \"100%\" }}>\r\n            <Table sx={{ backgroundColor: isDarkMode ? '#1A202C' : '#ffffff', borderRadius: '8px' }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B', fontWeight: 'bold' }}></TableCell>\r\n                  <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B', fontWeight: 'bold' }}>First Name</TableCell>\r\n                  <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B', fontWeight: 'bold' }}>Last Name</TableCell>\r\n                  <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B', fontWeight: 'bold' }}>Email Address</TableCell>\r\n                  <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B', fontWeight: 'bold' }}>User Type</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {Array.isArray(users) && users.map((user) => (\r\n                  <TableRow key={user.user_id}>\r\n                    <TableCell sx={{ padding: \"5px\" }}>\r\n                      <Button\r\n                        onClick={() => handleEditClick(user)}\r\n                        fontSize=\"small\"\r\n                        sx={{ cursor: \"pointer\" }}\r\n                      >\r\n                        <EditIcon />\r\n                      </Button>\r\n                    </TableCell>\r\n                    <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B' }}>{user.first_name}</TableCell>\r\n                    <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B' }}>{user.last_name}</TableCell>\r\n                    <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B' }}>{user.email_address}</TableCell>\r\n                    <TableCell sx={{ padding: \"10px\", color: isDarkMode ? '#F7FAFC' : '#1E293B' }}>{user.user_type}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Drawer for creating or editing user */}\r\n      <Drawer anchor=\"right\" open={drawerOpen} onClose={handleCloseDrawer}>\r\n        <Box sx={{ width: drawerWidth, height: '100%', display: 'flex', flexDirection: 'column', backgroundColor: isDarkMode ? '#2D3748' : '#ffffff' }}>\r\n          <Box sx={{ p: 2, borderBottom: \"1px solid #ccc\" }}>\r\n            <Typography variant=\"h6\" sx={{ color: isDarkMode ? '#F7FAFC' : '#1E293B' }}>{editUser ? \"Edit User\" : \"Create User\"}</Typography>\r\n          </Box>\r\n\r\n          {/* Form Content */}\r\n          <Box sx={{ flex: 1, overflowY: \"auto\", p: 2 }}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"First Name\"\r\n                    fullWidth\r\n                    name=\"first_name\"\r\n                    value={formik.values.first_name}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.first_name && Boolean(formik.errors.first_name)}\r\n                    helperText={formik.touched.first_name && formik.errors.first_name}\r\n                    sx={{\r\n                      backgroundColor: isDarkMode ? '#1A202C' : '#ffffff', color: isDarkMode ? '#F7FAFC' : '#1E293B'\r\n                      , '& .MuiInputBase-input': {\r\n                        color: isDarkMode ? 'white' : '#1e293b',  // Text color inside the input field\r\n                      }\r\n                    }}\r\n                    InputLabelProps={{ style: { color: isDarkMode ? '#ffffff' : '#000000' } }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Last Name\"\r\n                    fullWidth\r\n                    name=\"last_name\"\r\n                    value={formik.values.last_name}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.last_name && Boolean(formik.errors.last_name)}\r\n                    helperText={formik.touched.last_name && formik.errors.last_name}\r\n                    sx={{\r\n                      backgroundColor: isDarkMode ? '#1A202C' : '#ffffff', color: isDarkMode ? '#F7FAFC' : '#1E293B'\r\n                      , '& .MuiInputBase-input': {\r\n                        color: isDarkMode ? 'white' : '#1e293b',  // Text color inside the input field\r\n                      }\r\n                    }}\r\n                    InputLabelProps={{ style: { color: isDarkMode ? '#ffffff' : '#000000' } }}\r\n\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Email Address\"\r\n                    fullWidth\r\n                    name=\"email_address\"\r\n                    value={formik.values.email_address}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.email_address && Boolean(formik.errors.email_address)}\r\n                    helperText={formik.touched.email_address && formik.errors.email_address}\r\n                    sx={{\r\n                      backgroundColor: isDarkMode ? '#1A202C' : '#ffffff', color: isDarkMode ? '#F7FAFC' : '#1E293B'\r\n                      , '& .MuiInputBase-input': {\r\n                        color: isDarkMode ? 'white' : '#1e293b',  // Text color inside the input field\r\n                      }\r\n                    }}\r\n                    InputLabelProps={{ style: { color: isDarkMode ? '#ffffff' : '#000000' } }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={formik.values.password}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                    helperText={formik.touched.password && formik.errors.password}\r\n                    sx={{\r\n                      backgroundColor: isDarkMode ? '#1A202C' : '#ffffff', color: isDarkMode ? '#F7FAFC' : '#1E293B'\r\n                      , '& .MuiInputBase-input': {\r\n                        color: isDarkMode ? 'white' : '#1e293b',  // Text color inside the input field\r\n                      }\r\n                    }}\r\n                    InputLabelProps={{ style: { color: isDarkMode ? '#ffffff' : '#000000' } }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"User Type\"\r\n                    value={editUser ? editUser.user_type : \"admin\"} // Default value or user type from edit\r\n                    disabled // Makes the field non-editable\r\n                    fullWidth\r\n                    sx={{\r\n                      backgroundColor: isDarkMode ? '#1A202C' : '#ffffff',  // Background color\r\n                      color: isDarkMode ? 'white' : '#1E293B',  // Label color\r\n                      marginTop: 2,\r\n                      '& .MuiInputBase-input': {\r\n                        color: isDarkMode ? 'white' : '#1E293B',  // Text color inside the input field\r\n                      },\r\n                      '& .MuiInputLabel-root': {\r\n                        color: isDarkMode ? '#ffffff' : '#000000',  // Label color\r\n                      },\r\n                      '& .MuiInputBase-root.Mui-disabled': {\r\n                        backgroundColor: isDarkMode ? '#1A202C' : '#ffffff', // Background color for disabled state\r\n                      },\r\n                      '& .MuiInputBase-input.Mui-disabled': {\r\n                        WebkitTextFillColor: isDarkMode ? 'white' : '#1E293B',  // Text color inside the input field when disabled\r\n                      },\r\n                    }}\r\n                    InputLabelProps={{\r\n                      style: { color: isDarkMode ? '#ffffff' : '#000000' }\r\n                    }}\r\n                  />\r\n\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Box>\r\n\r\n          {/* Footer */}\r\n          <Divider />\r\n          <Box sx={{ p: 2, display: \"flex\", justifyContent: \"space-between\", marginTop: \"auto\" }}>\r\n            <Box sx={{ display: \"flex\", gap: 1 }}>\r\n              <Button\r\n                onClick={handleCloseDrawer}\r\n                startIcon={<CloseIcon />}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                sx={{ borderColor: isDarkMode ? '#F7FAFC' : '#1E293B' }}\r\n              >\r\n                Close\r\n              </Button>\r\n              {editUser && userType !== \"student\" && (  // Hide delete for student\r\n                <Button\r\n                  onClick={handleDeleteClick}\r\n                  startIcon={<DeleteIcon />}\r\n                  size=\"small\"\r\n                  color=\"error\"\r\n                  variant=\"outlined\"\r\n                  sx={{ borderColor: isDarkMode ? '#F7FAFC' : '#1E293B' }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              )}\r\n            </Box>\r\n            <Button\r\n              onClick={formik.handleSubmit}\r\n              startIcon={editUser ? <SaveIcon /> : <AddIcon />}\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n            >\r\n              {editUser ? \"Save\" : \"Create\"}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Drawer>\r\n\r\n      {/* Confirmation Dialog for Deletion */}\r\n      <Dialog open={deleteConfirmationOpen} onClose={handleDeleteCancel}>\r\n        <DialogTitle>Confirm Deletion</DialogTitle>\r\n        <DialogContent>\r\n          Are you sure you want to delete this user?\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteCancel} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDeleteConfirm} color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserReport;\r\n"],"names":["API_BASE_URL","process","validationSchema","yup","first_name","required","last_name","email_address","email","password","min","user_type","UserReport","_JSON$parse","isDarkMode","useContext","ThemeContext","users","setUsers","useState","drawerOpen","setDrawerOpen","editUser","setEditUser","deleteConfirmationOpen","setDeleteConfirmationOpen","drawerWidth","useMediaQuery","userType","JSON","parse","localStorage","getItem","useEffect","async","apiUrl","_JSON$parse2","userId","user_id","response","fetch","data","json","Array","isArray","console","error","fetchUsers","formik","useFormik","initialValues","enableReinitialize","onSubmit","method","headers","body","stringify","values","ok","prevUsers","map","user","handleEditClick","id","fetchUserById","handleDeleteCancel","handleCloseDrawer","_jsxs","Box","sx","backgroundColor","minHeight","children","border","padding","borderRadius","marginBottom","display","justifyContent","alignItems","_jsx","Typography","variant","fontWeight","color","Button","onClick","handleCreateClick","fontSize","textTransform","AddIcon","marginRight","Grid","container","spacing","item","xs","TableContainer","width","Table","TableHead","TableRow","TableCell","TableBody","cursor","EditIcon","Drawer","anchor","open","onClose","height","flexDirection","p","borderBottom","flex","overflowY","handleSubmit","TextField","label","fullWidth","name","value","onChange","handleChange","touched","Boolean","errors","helperText","InputLabelProps","style","type","disabled","marginTop","WebkitTextFillColor","Divider","gap","startIcon","CloseIcon","size","borderColor","handleDeleteClick","DeleteIcon","SaveIcon","Dialog","DialogTitle","DialogContent","DialogActions","filter","err"],"sourceRoot":""}