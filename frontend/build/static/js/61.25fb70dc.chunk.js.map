{"version":3,"file":"static/js/61.25fb70dc.chunk.js","mappings":"mNA6GA,QApGA,WACE,MAAM,WAAEA,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAC3BC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,IAGjCK,EAAcC,IAClB,MAAMC,EAAI,IAAIC,KAAKF,GAInB,MAAO,GAHOC,EAAEE,WAAa,KACjBF,EAAEG,aACDH,EAAEI,eACiB,GAIlCC,EAAAA,EAAAA,YAAU,KACcC,WACpB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,gEAC7BF,EAASG,KAAKC,OAAS,GACzBd,EAAWe,OAAOC,KAAKN,EAASG,KAAK,IAAII,QAAQC,GAAsB,OAAXA,KAE9DvB,EAAYe,EAASG,KACvB,CAAE,MAAOM,GACPC,QAAQD,MAAM,+BAAgCA,EAChD,GAGFE,EAAe,GACd,IAGH,MAAMC,EAAmB5B,EAASuB,QAAQM,GACxCxB,EAAQyB,MAAMN,IACZ,MAAMO,EAAQF,EAAQL,GACtB,SAAIO,GAA0B,kBAAVA,IACXA,EAAMC,cAAcC,SAAS9B,EAAW6B,cAErC,MAIhB,OACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,gBAAiBxC,EAAa,UAAY,UAAWyC,UAAW,QAASC,QAAS,OAAQC,UACnGC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEN,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,MAAM,4BAGlBT,EAAAA,EAAAA,KAAA,OAAKU,UAAU,2BAA0BJ,UACvCN,EAAAA,EAAAA,KAAA,SACEW,KAAK,OACLD,UAAU,uBACVE,YAAY,YACZf,MAAO5B,EACP4C,SAAWC,GAAM5C,EAAc4C,EAAEC,OAAOlB,YAI5CG,EAAAA,EAAAA,KAAA,OAAKU,UAAU,0BAAyBJ,UACtCC,EAAAA,EAAAA,MAAA,SAAOG,UAAU,gBAAgBM,MAAO,CAAEb,gBAAiBxC,EAAa,UAAY,SAAU2C,SAAA,EAC5FN,EAAAA,EAAAA,KAAA,SAAAM,UACEN,EAAAA,EAAAA,KAAA,MAAAM,SACGnC,EAAQ8C,KAAK3B,IACZU,EAAAA,EAAAA,KAAA,MAAAM,SACGhB,EACE4B,QAAQ,KAAM,KACdA,QAAQ,SAAUC,GAASA,EAAKC,iBAH5B9B,UAQfU,EAAAA,EAAAA,KAAA,SAAAM,SACGZ,EAAiBR,OAAS,EACzBQ,EAAiBuB,KAAKtB,IACpBK,EAAAA,EAAAA,KAAA,MAAAM,SACGnC,EAAQ8C,KAAK3B,IACZU,EAAAA,EAAAA,KAAA,MAAAM,SACc,uBAAXhB,GAA8C,gBAAXA,EAChCjB,EAAWsB,EAAQL,IACnBK,EAAQL,IAHL,GAAGK,EAAQ0B,MAAM/B,QAFrBK,EAAQ0B,OAWnBrB,EAAAA,EAAAA,KAAA,MAAAM,UACEN,EAAAA,EAAAA,KAAA,MAAIsB,QAASnD,EAAQe,OAAQwB,UAAU,sBAAqBJ,SAAC,2CAW/E,C,6FCvGA,MAaA,EAbmBiB,IAAgB,IAAf,MAAEd,GAAOc,EAE3B,MAAM,WAAE5D,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAElC,OACEmC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEG,QAAS,OAAQF,gBAAiBxC,EAAa,UAAY,UAAW6D,aAAc,MAAOC,aAAc,OAAQC,OAAQ,kBAAmBpB,UACrJN,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAACC,QAAQ,KAAK1B,GAAI,CAAE2B,MAAOlE,EAAa,QAAU,QAASmE,WAAY,QAASxB,SACxFG,KAEC,C","sources":["pages/reports/ParentReport.js","components/Breadcrumb.js"],"sourcesContent":["import Breadcrumb from \"../../components/Breadcrumb\";\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { Box } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { ThemeContext } from '../../config/ThemeContext'; // Import ThemeContext\r\nimport './GenericTable.css'; // Updated generic class names for styling\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nfunction GenericTable() {\r\n  const { isDarkMode } = useContext(ThemeContext); // Access theme context\r\n  const [students, setStudents] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');  // Search term to filter the student list\r\n  const [columns, setColumns] = useState([]); // To store the column names\r\n\r\n  // Format the date to mm/dd/yyyy\r\n  const formatDate = (date) => {\r\n    const d = new Date(date);\r\n    const month = d.getMonth() + 1;\r\n    const day = d.getDate();\r\n    const year = d.getFullYear();\r\n    return `${month}/${day}/${year}`;\r\n  };\r\n\r\n  // Fetch student details when the component mounts\r\n  useEffect(() => {\r\n    const fetchStudents = async () => {\r\n      try {\r\n        const response = await axios.get(`${API_BASE_URL}/view/parent-detail-report`);\r\n        if (response.data.length > 0) {\r\n          setColumns(Object.keys(response.data[0]).filter((column) => column !== 'id'));\r\n        }\r\n        setStudents(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching student data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchStudents();\r\n  }, []);\r\n\r\n  // Filter students based on search term\r\n  const filteredStudents = students.filter((student) =>\r\n    columns.some((column) => {\r\n      const value = student[column];\r\n      if (value && typeof value === 'string') {\r\n        return value.toLowerCase().includes(searchTerm.toLowerCase());\r\n      }\r\n      return false;\r\n    })\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ backgroundColor: isDarkMode ? '#2D3748' : '#F7FAFC', minHeight: '100vh', padding: '1px' }}>\r\n      <div>\r\n        <Breadcrumb title=\"Parents Details Report\" />\r\n\r\n        {/* Generic Search Input */}\r\n        <div className=\"generic-search-container\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"generic-search-input\"\r\n            placeholder=\"Search...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"generic-table-container\">\r\n          <table className=\"generic-table\" style={{ backgroundColor: isDarkMode ? '#1e293b' : 'white' }}>\r\n            <thead>\r\n              <tr>\r\n                {columns.map((column) => (\r\n                  <th key={column}>\r\n                    {column\r\n                      .replace(/_/g, ' ')\r\n                      .replace(/\\b\\w/g, (char) => char.toUpperCase())}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredStudents.length > 0 ? (\r\n                filteredStudents.map((student) => (\r\n                  <tr key={student.id}>\r\n                    {columns.map((column) => (\r\n                      <td key={`${student.id}-${column}`}>\r\n                        {column === 'student_date_stamp' || column === 'student_dob'\r\n                          ? formatDate(student[column])\r\n                          : student[column]}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={columns.length} className=\"no-matching-records\">\r\n                    No matching records found\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default GenericTable;\r\n","import React, { useContext } from \"react\";\r\nimport { Typography, Box } from \"@mui/material\";\r\nimport { ThemeContext } from '../config/ThemeContext'; // Import ThemeContext\r\n\r\nconst Breadcrumb = ({ title }) => {\r\n  // Move the useContext inside the component\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Box sx={{ padding: \"12px\", backgroundColor: isDarkMode ? '#1e293b' : '#e1f5fe', borderRadius: \"8px\", marginBottom: \"12px\", border: '1px solid #ccc' }}>\r\n      <Typography variant=\"h6\" sx={{ color: isDarkMode ? 'white' : 'black', fontWeight: \"bold\" }}>\r\n        {title}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n"],"names":["isDarkMode","useContext","ThemeContext","students","setStudents","useState","searchTerm","setSearchTerm","columns","setColumns","formatDate","date","d","Date","getMonth","getDate","getFullYear","useEffect","async","response","axios","get","data","length","Object","keys","filter","column","error","console","fetchStudents","filteredStudents","student","some","value","toLowerCase","includes","_jsx","Box","sx","backgroundColor","minHeight","padding","children","_jsxs","Breadcrumb","title","className","type","placeholder","onChange","e","target","style","map","replace","char","toUpperCase","id","colSpan","_ref","borderRadius","marginBottom","border","Typography","variant","color","fontWeight"],"sourceRoot":""}