{"version":3,"file":"static/js/479.8d63b14a.chunk.js","mappings":"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","sources":["pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  useTheme,\r\n  useMediaQuery,\r\n  CircularProgress,\r\n} from '@mui/material';\r\nimport { People, Payment, VolunteerActivism, Work } from '@mui/icons-material';\r\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\nimport { useContext } from 'react';\r\nimport { ThemeContext } from '../config/ThemeContext';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst Dashboard = () => {\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [loadingDashboard, setLoadingDashboard] = useState(true);\r\n  const [nationalityData, setNationalityData] = useState([]);\r\n  const [loadingNationality, setLoadingNationality] = useState(true);\r\n  const [educationData, setEducationData] = useState([]);\r\n  const [loadingEducation, setLoadingEducation] = useState(true);\r\n  const [currentEducationData, setCurrentEducationData] = useState([]);\r\n  const [loadingCurrentEducation, setLoadingCurrentEducation] = useState(true);\r\n  const [raceData, setRaceData] = useState([]);\r\n  const [loadingRace, setLoadingRace] = useState(true);\r\n  const [maritalData, setMaritalData] = useState([]);\r\n  const [loadingMarital, setLoadingMarital] = useState(true);\r\n  const [employmentData, setEmploymentData] = useState([]);\r\n  const [loadingEmployment, setLoadingEmployment] = useState(true);\r\n  const storedUser = JSON.parse(localStorage.getItem('user'));\r\n  const userName = storedUser\r\n    ? `${storedUser.first_name} ${storedUser.last_name}`\r\n    : 'Guest';\r\n\r\n  const theme = useTheme();\r\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\r\n\r\n  const chartColors = [\r\n    '#4E79A7',\r\n    '#A0CBE8',\r\n    '#F28E2B',\r\n    '#FFBE7D',\r\n    '#59A14F',\r\n    '#8CD17D',\r\n    '#B6992D',\r\n    '#F1CE63',\r\n    '#499894',\r\n    '#86BCB6',\r\n  ];\r\n\r\n  const getOuterRadius = () => {\r\n    if (isSmallScreen) return 55;\r\n    if (isMediumScreen) return 65;\r\n    return 75;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        const response = await axios.get(`${API_BASE_URL}/dashboard`);\r\n        setDashboardData(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching dashboard data:', error);\r\n      } finally {\r\n        setLoadingDashboard(false);\r\n      }\r\n    };\r\n\r\n    const fetchNationalityData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_BASE_URL}/student-nationality-distribution`\r\n        );\r\n        const updatedData = response.data\r\n          .filter(\r\n            (item) =>\r\n              item.student_nationality &&\r\n              item.student_nationality.toLowerCase() !== 'unknown'\r\n          )\r\n          .map((item) => ({\r\n            ...item,\r\n            count: Number(item.count) || 0,\r\n            student_nationality: item.student_nationality,\r\n          }));\r\n        setNationalityData(updatedData);\r\n      } catch (error) {\r\n        console.error('Error fetching nationality data:', error);\r\n      } finally {\r\n        setLoadingNationality(false);\r\n      }\r\n    };\r\n\r\n    const fetchEducationData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_BASE_URL}/student-highest-education-distribution`\r\n        );\r\n        const updatedData = response.data\r\n          .filter(\r\n            (item) =>\r\n              item.student_highest_education &&\r\n              item.student_highest_education.toLowerCase() !== 'unknown'\r\n          )\r\n          .map((item) => ({\r\n            ...item,\r\n            count: Number(item.count) || 0,\r\n            student_highest_education: item.student_highest_education,\r\n          }));\r\n        setEducationData(updatedData);\r\n      } catch (error) {\r\n        console.error('Error fetching education data:', error);\r\n      } finally {\r\n        setLoadingEducation(false);\r\n      }\r\n    };\r\n\r\n    const fetchCurrentEducationData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_BASE_URL}/student-current-education-distribution`\r\n        );\r\n        const updatedData = response.data\r\n          .filter(\r\n            (item) =>\r\n              item.student_type &&\r\n              item.student_type.toLowerCase() !== 'unknown'\r\n          )\r\n          .map((item) => ({\r\n            ...item,\r\n            count: Number(item.count) || 0,\r\n            student_type: item.student_type,\r\n          }));\r\n        setCurrentEducationData(updatedData);\r\n      } catch (error) {\r\n        console.error('Error fetching current education data:', error);\r\n      } finally {\r\n        setLoadingCurrentEducation(false);\r\n      }\r\n    };\r\n\r\n    const fetchRaceData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_BASE_URL}/student-race-distribution`\r\n        );\r\n        const updatedData = response.data\r\n          .filter(\r\n            (item) =>\r\n              item.student_race &&\r\n              item.student_race.toLowerCase() !== 'unknown'\r\n          )\r\n          .map((item) => ({\r\n            ...item,\r\n            count: Number(item.count) || 0,\r\n            student_race: item.student_race,\r\n          }));\r\n        setRaceData(updatedData);\r\n      } catch (error) {\r\n        console.error('Error fetching race data:', error);\r\n      } finally {\r\n        setLoadingRace(false);\r\n      }\r\n    };\r\n\r\n    const fetchMaritalData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_BASE_URL}/student-marital-status-distribution`\r\n        );\r\n        const updatedData = response.data\r\n          .filter(\r\n            (item) =>\r\n              item.student_marital_status &&\r\n              item.student_marital_status.toLowerCase() !== 'unknown'\r\n          )\r\n          .map((item) => ({\r\n            ...item,\r\n            count: Number(item.count) || 0,\r\n            student_marital_status: item.student_marital_status,\r\n          }));\r\n        setMaritalData(updatedData);\r\n      } catch (error) {\r\n        console.error('Error fetching marital data:', error);\r\n      } finally {\r\n        setLoadingMarital(false);\r\n      }\r\n    };\r\n\r\n    const fetchEmploymentData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_BASE_URL}/student-employment-status-distribution`\r\n        );\r\n        const updatedData = response.data\r\n          .filter(\r\n            (item) =>\r\n              item.student_employment_status &&\r\n              item.student_employment_status.toLowerCase() !== 'unknown'\r\n          )\r\n          .map((item) => ({\r\n            ...item,\r\n            count: Number(item.count) || 0,\r\n            student_employment_status: item.student_employment_status,\r\n          }));\r\n        setEmploymentData(updatedData);\r\n      } catch (error) {\r\n        console.error('Error fetching employment data:', error);\r\n      } finally {\r\n        setLoadingEmployment(false);\r\n      }\r\n    };\r\n\r\n    fetchDashboardData();\r\n    fetchNationalityData();\r\n    fetchEducationData();\r\n    fetchCurrentEducationData();\r\n    fetchRaceData();\r\n    fetchMaritalData();\r\n    fetchEmploymentData();\r\n  }, []);\r\n\r\n  // Custom legend formatter to set label color based on theme\r\n  const renderLegend = (props) => {\r\n    const { payload } = props;\r\n    return (\r\n      <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center', marginTop: 10 }}>\r\n        {payload.map((entry, index) => (\r\n          <li key={`item-${index}`} style={{ display: 'inline-block', margin: '0 10px' }}>\r\n            <span\r\n              style={{\r\n                display: 'inline-block',\r\n                width: 10,\r\n                height: 10,\r\n                borderRadius: '50%',\r\n                backgroundColor: entry.color,\r\n                marginRight: 5,\r\n              }}\r\n            />\r\n            <span style={{ color: isDarkMode ? '#FFFFFF' : '#000000', fontSize: '12px' }}>\r\n              {entry.value}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  // Loading spinner component\r\n  const renderLoadingSpinner = () => (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: 260,\r\n      }}\r\n    >\r\n      <CircularProgress />\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ backgroundColor: isDarkMode ? '#2D3748' : '#F7FAFC', padding: '1px' }}>\r\n      {/* Header Section */}\r\n      <Box\r\n        sx={{\r\n          backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n          padding: '20px',\r\n          borderRadius: '8px',\r\n          marginBottom: '20px',\r\n          border: '1px solid #ccc',\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{ fontWeight: 'bold', color: isDarkMode ? 'white' : 'black' }}\r\n        >\r\n          Dashboard\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body1\"\r\n          sx={{ color: isDarkMode ? 'white' : 'black', marginTop: 1 }}\r\n        >\r\n          Welcome, {userName}! 👋\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Student Count Card */}\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              {loadingDashboard ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 60 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                    >\r\n                      Student Count\r\n                    </Typography>\r\n                    <People sx={{ fontSize: 40, color: '#4B8BBE' }} />\r\n                  </Box>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    sx={{ fontWeight: 'bold', color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                  >\r\n                    {dashboardData?.studentCount || 0}\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Student Payments Card */}\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              {loadingDashboard ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 60 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                    >\r\n                      Student Payments\r\n                    </Typography>\r\n                    <Payment sx={{ fontSize: 40, color: '#F79C42' }} />\r\n                  </Box>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    sx={{ fontWeight: 'bold', color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                  >\r\n                    {dashboardData?.totalPayments || 0}\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Student Voluntary Services Card */}\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              {loadingDashboard ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 60 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                    >\r\n                      Voluntary Services\r\n                    </Typography>\r\n                    <VolunteerActivism sx={{ fontSize: 40, color: '#61C0BF' }} />\r\n                  </Box>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    sx={{ fontWeight: 'bold', color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                  >\r\n                    {dashboardData?.voluntaryServicesCount || 0}\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Student Interviews Card */}\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              {loadingDashboard ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 60 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                    >\r\n                      Student Interviews\r\n                    </Typography>\r\n                    <Work sx={{ fontSize: 40, color: '#F04E23' }} />\r\n                  </Box>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    sx={{ fontWeight: 'bold', color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n                  >\r\n                    {dashboardData?.interviewsCount || 0}\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Nationality Chart */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n              >\r\n                Nationalities\r\n              </Typography>\r\n              {loadingNationality ? (\r\n                renderLoadingSpinner()\r\n              ) : (\r\n                <Box sx={{ height: 260 }}>\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={nationalityData}\r\n                        dataKey=\"count\"\r\n                        nameKey=\"student_nationality\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={getOuterRadius()}\r\n                      >\r\n                        {nationalityData.map((entry, index) => (\r\n                          <Cell\r\n                            key={`cell-${index}`}\r\n                            fill={chartColors[index % chartColors.length]}\r\n                          />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                      <Legend\r\n                        content={renderLegend}\r\n                        layout=\"horizontal\"\r\n                        align=\"center\"\r\n                        verticalAlign=\"bottom\"\r\n                        payload={nationalityData.map((entry, index) => ({\r\n                          value: entry.student_nationality,\r\n                          type: 'circle',\r\n                          color: chartColors[index % chartColors.length],\r\n                        }))}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Current Education Chart */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n              >\r\n                Current Education\r\n              </Typography>\r\n              {loadingCurrentEducation ? (\r\n                renderLoadingSpinner()\r\n              ) : (\r\n                <Box sx={{ height: 260 }}>\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={currentEducationData}\r\n                        dataKey=\"count\"\r\n                        nameKey=\"student_type\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={getOuterRadius()}\r\n                      >\r\n                        {currentEducationData.map((entry, index) => (\r\n                          <Cell\r\n                            key={`cell-${index}`}\r\n                            fill={chartColors[index % chartColors.length]}\r\n                          />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                      <Legend\r\n                        content={renderLegend}\r\n                        layout=\"horizontal\"\r\n                        align=\"center\"\r\n                        verticalAlign=\"bottom\"\r\n                        payload={currentEducationData.map((entry, index) => ({\r\n                          value: entry.student_type,\r\n                          type: 'circle',\r\n                          color: chartColors[index % chartColors.length],\r\n                        }))}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Highest Education Chart */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n              >\r\n                Highest Education\r\n              </Typography>\r\n              {loadingEducation ? (\r\n                renderLoadingSpinner()\r\n              ) : (\r\n                <Box sx={{ height: 260 }}>\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={educationData}\r\n                        dataKey=\"count\"\r\n                        nameKey=\"student_highest_education\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={getOuterRadius()}\r\n                      >\r\n                        {educationData.map((entry, index) => (\r\n                          <Cell\r\n                            key={`cell-${index}`}\r\n                            fill={chartColors[index % chartColors.length]}\r\n                          />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                      <Legend\r\n                        content={renderLegend}\r\n                        layout=\"horizontal\"\r\n                        align=\"center\"\r\n                        verticalAlign=\"bottom\"\r\n                        payload={educationData.map((entry, index) => ({\r\n                          value: entry.student_highest_education,\r\n                          type: 'circle',\r\n                          color: chartColors[index % chartColors.length],\r\n                        }))}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Race Chart */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n              >\r\n                Race\r\n              </Typography>\r\n              {loadingRace ? (\r\n                renderLoadingSpinner()\r\n              ) : (\r\n                <Box sx={{ height: 260 }}>\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={raceData}\r\n                        dataKey=\"count\"\r\n                        nameKey=\"student_race\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={getOuterRadius()}\r\n                      >\r\n                        {raceData.map((entry, index) => (\r\n                          <Cell\r\n                            key={`cell-${index}`}\r\n                            fill={chartColors[index % chartColors.length]}\r\n                          />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                      <Legend\r\n                        content={renderLegend}\r\n                        layout=\"horizontal\"\r\n                        align=\"center\"\r\n                        verticalAlign=\"bottom\"\r\n                        payload={raceData.map((entry, index) => ({\r\n                          value: entry.student_race,\r\n                          type: 'circle',\r\n                          color: chartColors[index % chartColors.length],\r\n                        }))}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Marital Status Chart */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n              >\r\n                Marital Status\r\n              </Typography>\r\n              {loadingMarital ? (\r\n                renderLoadingSpinner()\r\n              ) : (\r\n                <Box sx={{ height: 260 }}>\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={maritalData}\r\n                        dataKey=\"count\"\r\n                        nameKey=\"student_marital_status\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={getOuterRadius()}\r\n                      >\r\n                        {maritalData.map((entry, index) => (\r\n                          <Cell\r\n                            key={`cell-${index}`}\r\n                            fill={chartColors[index % chartColors.length]}\r\n                          />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                      <Legend\r\n                        content={renderLegend}\r\n                        layout=\"horizontal\"\r\n                        align=\"center\"\r\n                        verticalAlign=\"bottom\"\r\n                        payload={maritalData.map((entry, index) => ({\r\n                          value: entry.student_marital_status,\r\n                          type: 'circle',\r\n                          color: chartColors[index % chartColors.length],\r\n                        }))}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Employment Status Chart */}\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <Card\r\n            sx={{\r\n              ...cardStyles,\r\n              backgroundColor: isDarkMode ? '#1E293B' : '#E1F5FE',\r\n              border: '1px solid #ccc',\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                variant=\"h6\"\r\n                sx={{ color: isDarkMode ? '#FFFFFF' : '#000000' }}\r\n              >\r\n                Employment Status\r\n              </Typography>\r\n              {loadingEmployment ? (\r\n                renderLoadingSpinner()\r\n              ) : (\r\n                <Box sx={{ height: 260 }}>\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={employmentData}\r\n                        dataKey=\"count\"\r\n                        nameKey=\"student_employment_status\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={getOuterRadius()}\r\n                      >\r\n                        {employmentData.map((entry, index) => (\r\n                          <Cell\r\n                            key={`cell-${index}`}\r\n                            fill={chartColors[index % chartColors.length]}\r\n                          />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                      <Legend\r\n                        content={renderLegend}\r\n                        layout=\"horizontal\"\r\n                        align=\"center\"\r\n                        verticalAlign=\"bottom\"\r\n                        payload={employmentData.map((entry, index) => ({\r\n                          value: entry.student_employment_status,\r\n                          type: 'circle',\r\n                          color: chartColors[index % chartColors.length],\r\n                        }))}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst cardStyles = {\r\n  borderRadius: 2,\r\n  boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',\r\n  padding: 2,\r\n  color: '#212121',\r\n};\r\n\r\nexport default Dashboard;"],"names":["API_BASE_URL","process","cardStyles","borderRadius","boxShadow","padding","color","Dashboard","isDarkMode","useContext","ThemeContext","dashboardData","setDashboardData","useState","loadingDashboard","setLoadingDashboard","nationalityData","setNationalityData","loadingNationality","setLoadingNationality","educationData","setEducationData","loadingEducation","setLoadingEducation","currentEducationData","setCurrentEducationData","loadingCurrentEducation","setLoadingCurrentEducation","raceData","setRaceData","loadingRace","setLoadingRace","maritalData","setMaritalData","loadingMarital","setLoadingMarital","employmentData","setEmploymentData","loadingEmployment","setLoadingEmployment","storedUser","JSON","parse","localStorage","getItem","userName","concat","first_name","last_name","theme","useTheme","isSmallScreen","useMediaQuery","breakpoints","down","isMediumScreen","between","chartColors","getOuterRadius","useEffect","async","response","axios","get","data","error","console","fetchDashboardData","updatedData","filter","item","student_nationality","toLowerCase","map","_objectSpread","count","Number","fetchNationalityData","student_highest_education","fetchEducationData","student_type","fetchCurrentEducationData","student_race","fetchRaceData","student_marital_status","fetchMaritalData","student_employment_status","fetchEmploymentData","renderLegend","props","payload","_jsx","style","listStyle","textAlign","marginTop","children","entry","index","_jsxs","display","margin","width","height","backgroundColor","marginRight","fontSize","value","renderLoadingSpinner","Box","sx","justifyContent","alignItems","CircularProgress","marginBottom","border","Typography","variant","fontWeight","Grid","container","spacing","xs","sm","md","Card","CardContent","_Fragment","People","studentCount","Payment","totalPayments","VolunteerActivism","voluntaryServicesCount","Work","interviewsCount","ResponsiveContainer","PieChart","Pie","dataKey","nameKey","cx","cy","outerRadius","Cell","fill","length","Tooltip","Legend","content","layout","align","verticalAlign","type"],"sourceRoot":""}